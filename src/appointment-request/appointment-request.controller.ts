import {  Body,  Controller,  Get,  Param,  Post,  Put,  Query,  UseGuards,} from '@nestjs/common';import { AppointmentRequestService } from './appointment-request.service';import { CreateAppointmentRequestDto } from './dto/create.dto';import { JwtAuthGuard } from '../auth/jwt/jwt-auth.guard';import { RolesGuard } from '../auth/jwt/roles.guard';import { Roles } from '../auth/jwt/roles.decorate';import { Role } from '../auth/entities/account.dto';@Controller('appointmentRequests')export class AppointmentRequestController {  constructor(    private readonly appointmentRequestService: AppointmentRequestService,  ) {}  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.PATIENT)  @Post('create')  async create(@Body() data: CreateAppointmentRequestDto) {    return this.appointmentRequestService.create(data);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.PATIENT)  @Put('cancel/:id')  async cancel(@Param('id') id: string) {    return this.appointmentRequestService.cancel(id);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.PATIENT)  @Get('findAllById/:id')  async findAllOfPatient(@Param('id') id: string) {    return this.appointmentRequestService.findAllOfPatient(id);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER)  @Get('findAllByDate')  async findAllByDate(@Query('date') dateIso: string) {    return this.appointmentRequestService.findAllByDate(dateIso);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER)  @Get('findAllByService/:id')  async findAllByService(    @Param('id') id: string,    @Query('date') dateIso: string,  ) {    return this.appointmentRequestService.findAllByService(id, dateIso);  }}