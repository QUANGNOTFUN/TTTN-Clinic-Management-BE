import {  BadRequestException,  Injectable,  UnauthorizedException,} from '@nestjs/common';import { JwtService } from '@nestjs/jwt';import { PrismaService } from '../prisma/prisma.service';import { CreateAccountDto } from './dto/create-user.dto';import { Role } from './entities/account.dto';import { LoginDto } from './dto/login.dto';import * as bcrypt from 'bcryptjs';@Injectable()export class AuthService {  constructor(    private readonly prisma: PrismaService,    private readonly jwtService: JwtService,  ) {}  async login(payload: LoginDto) {    const user = await this.prisma.account.findUnique({      where: { email: payload.email },    });    if (!user) {      throw new UnauthorizedException('Email hoặc mật khẩu không đúng');    }    const isPasswordValid = await bcrypt.compare(      payload.password,      user.password,    );    if (!isPasswordValid) {      throw new UnauthorizedException('Email hoặc mật khẩu không đúng');    }    const params = { sub: user.id, role: user.role };    const accessToken = await this.jwtService.signAsync(params);    return {      message: 'Đăng nhập thành công',      access_token: accessToken,      user: {        id: user.id,        email: user.email,        role: user.role,      },    };  }  async register(payload: CreateAccountDto) {    const existingUser = await this.prisma.account.findUnique({      where: { email: payload.email },    });    if (existingUser) {      throw new BadRequestException('Email đã tồn tại');    }    const hashedPassword = await bcrypt.hash(payload.password, 10);    switch (payload.role) {      case Role.PATIENT: {        const user = await this.prisma.account.create({          data: {            email: payload.email,            password: hashedPassword,            role: payload.role,          },        });        await this.prisma.patient.create({          data: {            user_id: user.id,          },        });        break;      }      case Role.MANAGER: {        const user = await this.prisma.account.create({          data: {            email: payload.email,            password: hashedPassword,            role: payload.role,          },        });        await this.prisma.doctor.create({          data: {            user_id: user.id,          },        });        break;      }      default:        throw new BadRequestException('Role không hợp lệ');    }    return { message: 'Đăng ký thành công' };  }  async profile(id: string) {    const user = await this.prisma.account.findUnique({      where: { id },      select: {        id: true,        email: true,        role: true,      },    });    if (!user) {      throw new BadRequestException('Không tìm thấy thông tin người dùng');    }    return user;  }}