import { Injectable, UnauthorizedException } from '@nestjs/common';import { PassportStrategy } from '@nestjs/passport';import { ExtractJwt, Strategy } from 'passport-jwt';import * as process from 'node:process';import { PrismaService } from '../../prisma/prisma.service';@Injectable()export class JwtStrategy extends PassportStrategy(Strategy) {  constructor(private prisma: PrismaService) {    super({      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),      ignoreExpiration: false,      secretOrKey: process.env.JWT_SECRET || 'secret-key',    });  }  async validate(payload: { sub: string; email: string; role: string }) {    const user = await this.prisma.account.findUnique({      where: { id: payload.sub },      select: {        id: true,        email: true,        role: true,      },    });    if (!user) {      throw new UnauthorizedException('Người dùng không tồn tại');    }    return { id: payload.sub, email: payload.email, role: payload.role };  }}