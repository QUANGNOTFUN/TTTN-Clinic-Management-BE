import { BadRequestException, Injectable } from '@nestjs/common';import { PrismaService } from '../prisma/prisma.service';import { CreateClinicServiceDto } from './dto/create-clinic-service.dto';import { UpdateClinicServiceDto } from './dto/update-clinic-service.dto';@Injectable()export class ClinicServicesService {  constructor(private readonly prisma: PrismaService) {}  async findAll() {    return this.prisma.clinicService.findMany({      orderBy: {        name: 'asc',      },    });  }  async create(data: CreateClinicServiceDto) {    const existItem = await this.prisma.clinicService.findUnique({      where: { name: data.name },    });    if (existItem) {      throw new BadRequestException('Tên dịch vụ này đã được tạo!');    }    const item = await this.prisma.clinicService.create({      data: data,    });    if (!item) {      throw new BadRequestException('Tạo dịch vụ mới bị lỗi!');    }    return {      message: 'Dịch vụ mới tạo thành công.',    };  }  async update(id: string, data: UpdateClinicServiceDto) {    const existItem = await this.prisma.clinicService.findUnique({      where: { id: id },    });    if (!existItem) {      throw new BadRequestException('Dịch vụ không tồn tại!');    }    try {      await this.prisma.clinicService.update({        where: { id: id },        data: data,      });    } catch {      throw new BadRequestException('Cập nhật dịch vụ bị lỗi!');    }    return { message: 'Cập nhật dịch vụ thành công.' };  }  async delete(id: string) {    const existItem = await this.prisma.clinicService.findUnique({      where: { id: id },    });    if (!existItem) {      throw new BadRequestException('Dịch vụ không tồn tại!');    }    try {      await this.prisma.clinicService.delete({        where: { id: id },      });    } catch {      throw new BadRequestException('Xóa dịch vụ bị lỗi!');    }    return { message: 'Xóa dịch vụ thành công.' };  }}