import {  Body,  Controller,  Delete,  Get,  Param,  Post,  Put,  Req,  UseGuards,} from '@nestjs/common';import { DoctorsService } from './doctors.service';import { JwtAuthGuard } from '../auth/jwt/jwt-auth.guard';import { RolesGuard } from '../auth/jwt/roles.guard';import { Roles } from '../auth/jwt/roles.decorate';import { Role } from '../auth/entities/account.dto';import { RequestSessionDto } from '../auth/dto/request-session.dto';import { CreateDoctorDto } from './dto/create-doctor.dto';import { UpdateDoctorDto } from './dto/update-doctor.dto';@Controller('doctors')export class DoctorsController {  constructor(private readonly doctorsService: DoctorsService) {}  @Get('public')  async findAllPublic() {    return this.doctorsService.findAllPublic();  }  @Get('findAll')  async findAll() {    return this.doctorsService.findAll();  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.DOCTOR)  @Get('findOne')  async findOne(@Req() req: RequestSessionDto) {    return this.doctorsService.findOne(req.user.id);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER)  @Post('create')  async create(@Body() payload: CreateDoctorDto) {    return this.doctorsService.create(payload);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER, Role.DOCTOR)  @Put('update/:id')  async update(@Param('id') id: string, @Body() payload: UpdateDoctorDto) {    return this.doctorsService.update(id, payload);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER)  @Delete('delete/:id')  async delete(@Param('id') id: string) {    return this.doctorsService.delete(id);  }}