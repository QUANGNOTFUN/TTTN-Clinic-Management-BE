import { BadRequestException, Injectable } from '@nestjs/common';import { PrismaService } from '../prisma/prisma.service';import * as bcrypt from 'bcryptjs';import { CreateDoctorDto } from './dto/create-doctor.dto';import { Role } from '../auth/entities/account.dto';import { UpdateDoctorDto } from './dto/update-doctor.dto';@Injectable()export class DoctorsService {  constructor(private readonly prisma: PrismaService) {}  async findAll() {    return this.prisma.doctor.findMany({      where: {        user: {          role: 'DOCTOR',        },      },      include: {        user: {          select: {            email: true,            is_active: true,          },        },        services: {          select: {            id: true,            name: true,            is_active: true,          },        },      },      orderBy: {        full_name: 'asc',      },    });  }  async findOne(id: string) {    return this.prisma.doctor.findUnique({      where: { user_id: id },      include: {        user: {          select: {            email: true,          },        },      },    });  }  async create(payload: CreateDoctorDto) {    const existingUser = await this.prisma.account.findUnique({      where: { email: payload.email },    });    if (existingUser) {      throw new BadRequestException('Email đã tồn tại');    }    const hashedPassword = await bcrypt.hash(payload.password, 10);    const user = await this.prisma.account.create({      data: {        email: payload.email,        password: hashedPassword,        role: Role.DOCTOR,        is_active: true,      },    });    await this.prisma.doctor.create({      data: {        user_id: user.id,        full_name: payload.full_name,      },    });    return { message: 'Tạo bác sĩ thành công' };  }  async update(id: string, payload: UpdateDoctorDto) {    const doctor = await this.prisma.doctor.findUnique({      where: { user_id: id },    });    if (!doctor) {      throw new BadRequestException('Bác sĩ không tồn tại');    }    await this.prisma.doctor.update({      where: { user_id: id },      data: {        full_name: payload.full_name,        gender: payload.gender,        phone_number: payload.phone_number,        specialty: payload.specialty,        bio: payload.bio,        services: payload.services_id          ? {              set: payload.services_id.map((serviceId) => ({ id: serviceId })),            }          : undefined,      },    });    return { message: 'Cập nhật thông tin bác sĩ thành công' };  }  async delete(id: string) {    const doctor = await this.prisma.doctor.findUnique({      where: { user_id: id },    });    if (!doctor) {      throw new BadRequestException('Bác sĩ không tồn tại');    }    await this.prisma.doctor.delete({      where: { user_id: id },    });    await this.prisma.account.delete({      where: { id: id },    });    return { message: 'Xóa bác sĩ thành công' };  }  async findAllPublic() {    return this.prisma.doctor.findMany({      where: {        user: {          role: 'DOCTOR',        },      },      include: {        user: {          select: {            email: true,            is_active: true,          },        },        services: {          select: {            id: true,            name: true,            is_active: true,          },        },      },      orderBy: {        full_name: 'asc',      },    });  }}