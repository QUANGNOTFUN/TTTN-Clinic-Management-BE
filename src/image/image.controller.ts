import {  Controller,  Param,  Patch,  UploadedFile,  UseGuards,  UseInterceptors,} from '@nestjs/common';import { FileInterceptor } from '@nestjs/platform-express';import { ImageService } from './image.service';import { multerConfig } from '../config/multer.config';import { JwtAuthGuard } from '../auth/jwt/jwt-auth.guard';import { RolesGuard } from '../auth/jwt/roles.guard';import { Roles } from '../auth/jwt/roles.decorate';import { Role } from '../auth/entities/account.dto';@Controller('images')export class ImageController {  constructor(private imageService: ImageService) {}  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.DOCTOR, Role.MANAGER)  @Patch('doctor/:id')  @UseInterceptors(FileInterceptor('image', multerConfig))  async updateDoctorImage(    @Param('id') doctorId: string,    @UploadedFile() file: Express.Multer.File,  ) {    return this.imageService.updateDoctorImage(doctorId, file);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.PATIENT)  @Patch('patient/:id')  @UseInterceptors(FileInterceptor('image', multerConfig))  async updatePatientImage(    @Param('id') patientId: string,    @UploadedFile() file: Express.Multer.File,  ) {    return this.imageService.updatePatientImage(patientId, file);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER)  @Patch('service/:id')  @UseInterceptors(FileInterceptor('image', multerConfig))  async updateServiceImage(    @Param('id') serviceId: string,    @UploadedFile() file: Express.Multer.File,  ) {    return {      url: await this.imageService.updateServiceImage(serviceId, file),    };  }}