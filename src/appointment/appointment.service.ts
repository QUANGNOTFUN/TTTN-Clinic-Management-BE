import { Injectable, NotFoundException } from '@nestjs/common';import { Cron } from '@nestjs/schedule';import { PrismaService } from '../prisma/prisma.service';@Injectable()export class AppointmentService {  constructor(private readonly prisma: PrismaService) {}  private isWorkingHours(date: Date): boolean {    const vnTime = new Date(date.getTime() + 7 * 60 * 60 * 1000); // giờ VN    const hour = vnTime.getHours();    const minute = vnTime.getMinutes();    const inMorning =      (hour > 8 || (hour === 8 && minute >= 0)) &&      (hour < 11 || (hour === 11 && minute <= 30));    const inAfternoon =      (hour > 13 || (hour === 13 && minute >= 30)) &&      (hour < 16 || (hour === 16 && minute <= 30));    return inMorning || inAfternoon;    // return true;  }  private nowVietnameseTime() {    const now = new Date();    return new Date(now.getTime() + 7 * 60 * 60 * 1000);  }  @Cron('*/30 * * * * *')  async autoCreateQueue() {    const now = this.nowVietnameseTime();    const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000); // 1 tiếng sau    if (!this.isWorkingHours(now)) {      throw new Error('Không phải giờ làm việc');    }    const requests = await this.prisma.appointmentRequest.findMany({      where: {        status: 'PENDING',        appointment_time: {          gte: now,          lte: oneHourLater,        },      },    });    // Tìm queue mới nhất của cùng ngày    const vnTime = this.nowVietnameseTime();    const startOfDay = new Date(vnTime);    startOfDay.setHours(0, 0, 0, 0);    const endOfDay = new Date(vnTime);    endOfDay.setHours(23, 59, 59, 999);    const latestQueue = await this.prisma.appointment.findFirst({      where: {        scheduled_at: {          gte: startOfDay,          lte: endOfDay,        },      },      orderBy: { queue_number: 'desc' },    });    let currentQueueNumber = latestQueue ? latestQueue.queue_number : 1;    for (const req of requests) {      const service = await this.prisma.clinicService.findUnique({        where: { id: req.service_id },      });      if (!service) {        throw new NotFoundException('Không tìm thấy dịch vụ');      }      let doctorId: string | null = req?.doctor_id ?? null;      // Nếu chưa có doctor → tìm doctor có service + lịch làm việc phù hợp      if (!doctorId) {        const doctors = await this.prisma.doctor.findMany({          where: {            services: {              some: { id: req.service_id }, // bác sĩ có dịch vụ đó            },          },          include: {            services: true,            schedules: true,          },        });        // Lọc doctor theo lịch làm việc (giả sử schedules có field day_of_week + shift)        const appointmentDate = new Date(req.appointment_time);        const dayOfWeek = appointmentDate.getDay(); // 0=CN, 1=T2,...        const shift = appointmentDate.getHours() < 12 ? 'MORNING' : 'AFTERNOON';        const availableDoctor = doctors.find((d) =>          d.schedules.some(            (s) =>              s.date.getDay() === dayOfWeek && // getDay() trả về số 0–6              s.shift === shift &&              s.is_available,          ),        );        if (!availableDoctor) {          throw new NotFoundException('Không tìm thấy bác sĩ có lịch phù hợp');        }        doctorId = availableDoctor.user_id; // dùng user_id (doctor_id trong DB)      }      await this.prisma.appointment.create({        data: {          appointment_request_id: req.id,          patient_id: req.patient_id,          doctor_id: doctorId,          scheduled_at: req.appointment_time,          queue_number: currentQueueNumber,          status: 'WAITING',        },      });      currentQueueNumber++; // tăng queue_number      await this.prisma.appointmentRequest.update({        where: { id: req.id },        data: { status: 'CONFIRMED' },      });    }  }  async findAllById(patientId: string) {    const patient = await this.prisma.patient.findUnique({      where: { user_id: patientId },    });    if (!patient) {      throw new NotFoundException('Không tìm thấy bệnh nhân');    }    return this.prisma.appointment.findMany();  }}