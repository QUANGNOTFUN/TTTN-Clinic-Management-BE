import {  Body,  Controller,  Delete,  Get,  Param,  Post,  Query,  UseGuards,} from '@nestjs/common';import { DoctorScheduleService } from './doctor-schedule.service';import { CreateDoctorScheduleDto } from './dto/create-doctor-schedule.dto';import { JwtAuthGuard } from '../auth/jwt/jwt-auth.guard';import { RolesGuard } from '../auth/jwt/roles.guard';import { Roles } from '../auth/jwt/roles.decorate';import { Role } from '../auth/entities/account.dto';@Controller('doctorSchedules')export class DoctorScheduleController {  constructor(private readonly doctorScheduleService: DoctorScheduleService) {}  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER)  @Post('create')  create(@Body() createDoctorScheduleDto: CreateDoctorScheduleDto) {    return this.doctorScheduleService.create(createDoctorScheduleDto);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER, Role.DOCTOR)  @Get('findAllByWeek')  async findAllByWeek(@Query('date') dateStr: string) {    return this.doctorScheduleService.findAllByWeek(dateStr);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER, Role.DOCTOR)  @Get('findOneByWeek/:id')  findOneByWeek(@Param('id') id: string, @Query('date') dateStr: string) {    return this.doctorScheduleService.findOneByWeek(id, dateStr);  }  @UseGuards(JwtAuthGuard, RolesGuard)  @Roles(Role.MANAGER)  @Delete('delete/:id')  remove(@Param('id') scheduleId: string) {    return this.doctorScheduleService.remove(scheduleId);  }}