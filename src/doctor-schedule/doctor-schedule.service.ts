import { BadRequestException, Injectable } from '@nestjs/common';import { CreateDoctorScheduleDto } from './dto/create-doctor-schedule.dto';import { UpdateDoctorScheduleDto } from './dto/update-doctor-schedule.dto';import { PrismaService } from 'src/prisma/prisma.service';@Injectable()export class DoctorScheduleService {  constructor(private readonly prismaService: PrismaService) {}  async create(payload: CreateDoctorScheduleDto) {    const doctor = await this.prismaService.doctor.findUnique({      where: { user_id: payload.doctor_id },    });    if (!doctor) {      throw new BadRequestException('Bác sĩ không tồn tại');    }    const baseDate = new Date(payload.date);    if (isNaN(baseDate.getTime())) {      throw new BadRequestException('Ngày không hợp lệ');    }    for (let i = 0; i < payload.consecutiveWeeks; i++) {      const newDate = new Date(baseDate);      newDate.setDate(baseDate.getDate() + i * 7);      const schedule = await this.prismaService.doctorSchedule.create({        data: {          doctor_id: payload.doctor_id,          date: newDate.toISOString(),          shift: payload.shift,        },      });      if (!schedule) {        throw new BadRequestException('Tạo lịch hẹn bị lỗi!');      }    }    return { message: 'Tạo lịch hẹn thành công' };  }  async findAllByDate(dateStr: string) {    // Kiểm tra format ISO trước khi vào try-catch    const isoRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/;    if (!isoRegex.test(dateStr)) {      throw new BadRequestException(        'Ngày phải đúng định dạng ISO (YYYY-MM-DDTHH:mm:ss.sssZ)',      );    }    const date = new Date(dateStr);    // Kiểm tra date có hợp lệ không    if (isNaN(date.getTime())) {      throw new BadRequestException('Ngày không hợp lệ');    }    try {      const startOfDay = new Date(date.setHours(0, 0, 0, 0));      const endOfDay = new Date(date.setHours(23, 59, 59, 999));      return this.prismaService.doctorSchedule.findMany({        where: {          date: {            gte: startOfDay,            lte: endOfDay,          },        },      });    } catch {      throw new BadRequestException('Có lỗi xảy ra khi lấy lịch khám');    }  }  findOne(id: number) {    return `This action returns a #${id} doctorSchedule`;  }  update(id: number, updateDoctorScheduleDto: UpdateDoctorScheduleDto) {    return `This action updates a #${id} doctorSchedule`;  }  remove(id: number) {    return `This action removes a #${id} doctorSchedule`;  }}