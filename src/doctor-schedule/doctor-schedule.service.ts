import { BadRequestException, Injectable } from '@nestjs/common';import { CreateDoctorScheduleDto } from './dto/create-doctor-schedule.dto';import { PrismaService } from 'src/prisma/prisma.service';@Injectable()export class DoctorScheduleService {  constructor(private readonly prismaService: PrismaService) {}  async create(payload: CreateDoctorScheduleDto) {    const doctor = await this.prismaService.doctor.findUnique({      where: { user_id: payload.doctor_id },    });    if (!doctor) {      throw new BadRequestException('Bác sĩ không tồn tại');    }    const baseDate = new Date(payload.date);    if (isNaN(baseDate.getTime())) {      throw new BadRequestException('Ngày không hợp lệ');    }    const existingSchedule = await this.prismaService.doctorSchedule.findFirst({      where: {        doctor_id: payload.doctor_id,        date: baseDate.toISOString(),        shift: payload.shift,      },    });    if (existingSchedule) {      throw new BadRequestException('Lịch hẹn đã tồn tại');    }    for (let i = 0; i < payload.consecutiveWeeks; i++) {      const newDate = new Date(baseDate);      newDate.setDate(baseDate.getDate() + i * 7);      const schedule = await this.prismaService.doctorSchedule.create({        data: {          doctor_id: payload.doctor_id,          date: newDate.toISOString(),          shift: payload.shift,        },      });      if (!schedule) {        throw new BadRequestException('Tạo lịch hẹn bị lỗi!');      }    }    return { message: 'Tạo lịch hẹn thành công' };  }  private getWeekRange(dateStr: string) {    const date = new Date(dateStr);    if (isNaN(date.getTime())) {      throw new BadRequestException('Ngày không hợp lệ');    }    // Lấy ngày trong tuần (0 = CN, 1 = T2, ..., 6 = T7)    const day = date.getDay();    // Nếu là CN (0) thì tính như 7 để trừ ra thứ 2    const diffToMonday = day === 0 ? -6 : 1 - day;    // Tạo ngày bắt đầu (thứ 2)    const monday = new Date(date);    monday.setDate(date.getDate() + diffToMonday);    monday.setHours(0, 0, 0, 0);    // Ngày kết thúc (CN)    const sunday = new Date(monday);    sunday.setDate(monday.getDate() + 6);    sunday.setHours(23, 59, 59, 999);    return { monday, sunday };  }  async findAllByWeek(dateStr: string) {    const { monday, sunday } = this.getWeekRange(dateStr);    return this.prismaService.doctorSchedule.findMany({      where: {        date: {          gte: monday,          lte: sunday,        },      },      orderBy: {        date: 'asc',      },    });  }  async findOneByWeek(id: string, dateStr: string) {    const { monday, sunday } = this.getWeekRange(dateStr);    return this.prismaService.doctorSchedule.findMany({      where: {        doctor_id: id,        date: {          gte: monday,          lte: sunday,        },      },      orderBy: {        date: 'asc',      },    });  }  async remove(scheduleId: string) {    const schedule = await this.prismaService.doctorSchedule.findUnique({      where: { id: scheduleId },    });    if (!schedule) {      throw new BadRequestException('Lịch hẹn không tồn tại');    }    await this.prismaService.doctorSchedule.delete({      where: { id: scheduleId },    });    return { message: 'Xóa lịch hẹn thành công' };  }}