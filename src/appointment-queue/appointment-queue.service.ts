import { Injectable, Logger, NotFoundException } from '@nestjs/common';import { Cron } from '@nestjs/schedule';import { PrismaService } from '../prisma/prisma.service';@Injectable()export class AppointmentQueueService {  private readonly logger = new Logger(AppointmentQueueService.name);  constructor(private readonly prisma: PrismaService) {}  private isWorkingHours(date: Date): boolean {    const vnTime = new Date(date.getTime() + 7 * 60 * 60 * 1000); // giờ VN    const hour = vnTime.getHours();    const minute = vnTime.getMinutes();    const inMorning =      (hour > 8 || (hour === 8 && minute >= 0)) &&      (hour < 11 || (hour === 11 && minute <= 30));    const inAfternoon =      (hour > 13 || (hour === 13 && minute >= 30)) &&      (hour < 16 || (hour === 16 && minute <= 30));    return inMorning || inAfternoon;  }  @Cron('0,30 * * * *')  async autoCreateQueue() {    // Lấy danh sách request đã được accept nhưng chưa có queue    const now = new Date();    const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000); // 1 tiếng sau    if (!this.isWorkingHours(now)) {      throw new Error('Không phải giờ làm việc');    }    const requests = await this.prisma.appointmentRequest.findMany({      where: {        status: 'PENDING',        appointment_time: {          gte: now,          lte: oneHourLater,        },      },    });    for (const req of requests) {      const service = await this.prisma.clinicService.findUnique({        where: { id: req.service_id },      });      if (!service) {        throw new NotFoundException('Không tìm thấy dịch vụ');      }      const doctor = await this.prisma.doctor.findFirst({        where: { specialty: service.name },      });      if (!doctor) {        throw new NotFoundException('Không tìm thấy bác sĩ');      }      // await this.prisma.appointmentQueue.create({      //   data: {      //     appointment_request_id: req.id,      //     patient_id: req.patient_id,      //     doctor_id: doctor.id,      //     scheduled_at: req.scheduled_at,      //     queue_number: 1,      //     status: 'WAITING',      //   },      // });    }  }}